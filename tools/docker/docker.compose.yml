version: '3.8'

services:
  # Database Services
  postgres:
    image: postgres:15-alpine
    container_name: laundry_postgres
    environment:
      POSTGRES_DB: ${DB_NAME:-laundry_db}
      POSTGRES_USER: ${DB_USERNAME:-laundry_user}
      POSTGRES_PASSWORD: ${DB_PASSWORD:-password}
    ports:
      - "${DB_PORT:-5432}:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ../database/init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - laundry_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USERNAME:-laundry_user}"]
      interval: 30s
      timeout: 10s
      retries: 3

  redis:
    image: redis:7-alpine
    container_name: laundry_redis
    ports:
      - "${REDIS_PORT:-6379}:6379"
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes
    networks:
      - laundry_network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Backend Service
  backend:
    build:
      context: ../../
      dockerfile: apps/backend/Dockerfile
    container_name: laundry_backend
    environment:
      NODE_ENV: development
      DB_HOST: postgres
      REDIS_HOST: redis
      PORT: 3000
    ports:
      - "3000:3000"
    volumes:
      - ../../apps/backend:/app/apps/backend
      - ../../packages:/app/packages
      - /app/node_modules
      - /app/apps/backend/node_modules
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - laundry_network
    restart: unless-stopped

  # Frontend Service
  frontend:
    build:
      context: ../../
      dockerfile: apps/frontend/Dockerfile
    container_name: laundry_frontend
    environment:
      NODE_ENV: development
    ports:
      - "4200:4200"
    volumes:
      - ../../apps/frontend:/app/apps/frontend
      - ../../packages:/app/packages
      - /app/node_modules
      - /app/apps/frontend/node_modules
    depends_on:
      - backend
    networks:
      - laundry_network
    restart: unless-stopped

  # Development Tools
  adminer:
    image: adminer:4.8.1
    container_name: laundry_adminer
    ports:
      - "8080:8080"
    depends_on:
      - postgres
    networks:
      - laundry_network
    restart: unless-stopped

  redis-commander:
    image: rediscommander/redis-commander:latest
    container_name: redis_commander
    environment:
      REDIS_HOSTS: "local:redis:6379"
    ports:
      - "8081:8081"
    depends_on:
      - redis
    networks:
      - laundry_network
    restart: unless-stopped

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local

networks:
  laundry_network:
    driver: bridge